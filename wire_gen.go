// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/client"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/config"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/controller"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/ioc"
	client2 "github.com/cqhasy/2025-Muxi-Team-auditor-Backend/langchain/client"
	config2 "github.com/cqhasy/2025-Muxi-Team-auditor-Backend/langchain/config"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/middleware"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/pkg/jwt"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/pkg/viperx"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/repository/cache"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/repository/dao"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/router"
	"github.com/cqhasy/2025-Muxi-Team-auditor-Backend/service"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitWebServer(confPath string) *App {
	vipperSetting := viperx.NewVipperSetting(confPath)
	oAuthConfig := config.NewOAuthConf(vipperSetting)
	oAuthClient := client.NewOAuthClient(oAuthConfig)
	dbConfig := config.NewDBConf(vipperSetting)
	logConfig := config.NewLogConf(vipperSetting)
	logger := ioc.InitLogger(logConfig)
	db := ioc.InitDB(dbConfig, logger)
	userDAO := dao.NewUserDAO(db)
	cacheConfig := config.NewCacheConf(vipperSetting)
	redisClient := ioc.InitRedis(cacheConfig)
	jwtConfig := config.NewJWTConf(vipperSetting)
	redisJWTHandler := jwt.NewRedisJWTHandler(redisClient, jwtConfig)
	authService := service.NewAuthService(userDAO, redisJWTHandler)
	authController := controller.NewOAuthController(oAuthClient, authService)
	userService := service.NewUserService(userDAO, redisJWTHandler)
	userController := controller.NewUserController(userService)
	itemService := service.NewItemService(userDAO, redisJWTHandler, logger)
	itemController := controller.NewItemController(itemService)
	qiNiuYunConfig := config.NewQiniuConf(vipperSetting)
	tubeService := service.NewTubeService(userDAO, redisJWTHandler, qiNiuYunConfig)
	tubeController := controller.NewTuberController(tubeService)
	userDAOInterface := ProvideUserDAO(db)
	redisCache := ioc.NewRedisCache(redisClient)
	cacheInterface := ProvideRedisCache(redisCache)
	projectCache := cache.NewProjectCache(cacheInterface)
	projectService := service.NewProjectService(userDAOInterface, redisJWTHandler, projectCache)
	projectController := controller.NewProjectController(projectService)
	itemDao := dao.NewItemDao(db)
	projectDAO := dao.NewProjectDAO(db)
	muxiAI := config2.NewMuxiAIConf(vipperSetting)
	auditAIClient := client2.Connect(muxiAI)
	llmService := service.NewLLMService(userDAO, itemDao, projectDAO, auditAIClient, logger, projectCache)
	llmController := controller.NewLLMController(llmService)
	removeService := service.NewRemoveService(userDAOInterface)
	removeController := controller.NewRemoveController(removeService)
	authMiddleware := middleware.NewAuthMiddleware(redisJWTHandler)
	middlewareConf := config.NewMiddleWareConf(vipperSetting)
	corsMiddleware := middleware.NewCorsMiddleware(middlewareConf)
	prometheusConfig := config.NewPrometheusConf(vipperSetting)
	prometheus := ioc.InitPrometheus(prometheusConfig)
	loggerMiddleware := middleware.NewLoggerMiddleware(logger, prometheus)
	engine := router.NewRouter(authController, userController, itemController, tubeController, projectController, llmController, removeController, authMiddleware, corsMiddleware, loggerMiddleware)
	appConf := config.NewAppConf(vipperSetting)
	app := NewApp(engine, appConf)
	return app
}

// wire.go:

// 提供 dao.UserDAO 的 provider
func ProvideUserDAO(db *gorm.DB) dao.UserDAOInterface {
	return &dao.UserDAO{DB: db}
}

func ProvideRedisCache(c *ioc.RedisCache) cache.CacheInterface {
	return c
}
